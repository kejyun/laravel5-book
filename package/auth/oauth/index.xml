<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OAuth2 on Laravel 學習筆記</title>
    <link>https://laravel5-book.kejyun.com/package/auth/oauth/</link>
    <description>Recent content in OAuth2 on Laravel 學習筆記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-TW</language>
    <lastBuildDate>Sun, 07 Mar 2021 21:24:42 +0800</lastBuildDate>
    
	<atom:link href="https://laravel5-book.kejyun.com/package/auth/oauth/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Client Credentials</title>
      <link>https://laravel5-book.kejyun.com/package/auth/oauth/package-auth-oauth2-client-credentials/</link>
      <pubDate>Sun, 07 Mar 2021 21:24:42 +0800</pubDate>
      
      <guid>https://laravel5-book.kejyun.com/package/auth/oauth/package-auth-oauth2-client-credentials/</guid>
      <description>OAuth2 Client Credentials 設定 config 在 config/oauth2.php 檔案中加入下列設定，並設定你的 token 存活時間(access_token_ttl)，單位時間為秒
return [ &amp;#39;grant_types&amp;#39; =&amp;gt; [ &amp;#39;client_credentials&amp;#39; =&amp;gt; [ &amp;#39;class&amp;#39; =&amp;gt; &amp;#39;\League\OAuth2\Server\Grant\ClientCredentialsGrant&amp;#39;, &amp;#39;access_token_ttl&amp;#39; =&amp;gt; 3600 ] ] ]; 取得 Access token 在我們取得 Access token 的資料欄位中填入下列欄位
   欄位名稱 資料     grant_types client_credentials   client_id KeJyun   client_secret KeJyunSecret     client_id 與 client_secret 為在 OAuth 套件說明頁 建立的
 送出到我們設定的 /oauth/access_token 路由後，我們就可以直接取得 access_token，並回傳此 token 失效的時間 expires_in 為我們設定的 access_token_ttl</description>
    </item>
    
    <item>
      <title>Password Grant</title>
      <link>https://laravel5-book.kejyun.com/package/auth/oauth/package-auth-oauth2-password-grant/</link>
      <pubDate>Sun, 07 Mar 2021 21:24:42 +0800</pubDate>
      
      <guid>https://laravel5-book.kejyun.com/package/auth/oauth/package-auth-oauth2-password-grant/</guid>
      <description>OAuth2 Password Grant 設定 config 在 config/oauth2.php 檔案中加入下列設定，並設定你的 token 存活時間(access_token_ttl)，單位時間為秒，在 callback 設定您要用來驗證使用者帳號密碼的類別函式，OAuth2 會透過這個 callback 去驗證使用者的帳號密碼
return [ &amp;#39;grant_types&amp;#39; =&amp;gt; [ &amp;#39;password&amp;#39; =&amp;gt; [ &amp;#39;class&amp;#39; =&amp;gt; &amp;#39;\League\OAuth2\Server\Grant\PasswordGrant&amp;#39;, &amp;#39;callback&amp;#39; =&amp;gt; &amp;#39;\App\PasswordVerifier@verify&amp;#39;, &amp;#39;access_token_ttl&amp;#39; =&amp;gt; 3600 ], ] ]; 建立驗證身份 callback OAuth 會將 Client 傳來的 username 及 password 欄位的資料透過 callback 傳入並驗證，當中驗證的規則跟邏輯你可以自行定義，若驗證失敗回傳 false 即可，驗證成功的話可以將使用者的編號回傳，OAuth 會將 Access token 對應的使用者編號（資源擁有者編號）記錄下來
use Illuminate\Support\Facades\Auth; class PasswordGrantVerifier { public function verify($username, $password) { $credentials = [ &amp;#39;email&amp;#39; =&amp;gt; $username, &amp;#39;password&amp;#39; =&amp;gt; $password, ]; // 驗證成功 if (Auth::once($credentials)) { return Auth::user()-&amp;gt;id; } // 驗證失敗 return false; } }  取得 Access token 在我們取得 Access token 的資料欄位中填入下列欄位</description>
    </item>
    
    <item>
      <title>Refresh Token</title>
      <link>https://laravel5-book.kejyun.com/package/auth/oauth/package-auth-oauth2-refresh-token/</link>
      <pubDate>Sun, 07 Mar 2021 21:24:42 +0800</pubDate>
      
      <guid>https://laravel5-book.kejyun.com/package/auth/oauth/package-auth-oauth2-refresh-token/</guid>
      <description>OAuth2 Refresh Token 設定 config 在 config/oauth2.php 檔案中加入下列設定，並設定你的 token 存活時間(access_token_ttl) 及 refresh token 存活時間(refresh_token_ttl) 單位時間為秒
 注意，若使用 Refresh Token 時，必須至少有 Password Grant 或 Auth Code Grant 的這兩種 OAuth2 驗證方法其中一種，然後在取得 Access token 時，會一併回傳 refresh token
 return [ &amp;#39;grant_types&amp;#39; =&amp;gt; [ &amp;#39;refresh_token&amp;#39; =&amp;gt; [ &amp;#39;class&amp;#39; =&amp;gt; &amp;#39;\League\OAuth2\Server\Grant\RefreshTokenGrant&amp;#39;, &amp;#39;access_token_ttl&amp;#39; =&amp;gt; 3600, &amp;#39;refresh_token_ttl&amp;#39; =&amp;gt; 36000 ] ] ]; 使用 Password Grant 取得 Access token 及 Refresh Token 在我們取得 Access token 的資料欄位中填入下列欄位
   欄位名稱 資料     grant_types password   username kejyun@gmail.</description>
    </item>
    
    <item>
      <title>Password Grant with Scope</title>
      <link>https://laravel5-book.kejyun.com/package/auth/oauth/package-auth-oauth2-password-grant-with-scope/</link>
      <pubDate>Sun, 07 Mar 2021 21:24:42 +0800</pubDate>
      
      <guid>https://laravel5-book.kejyun.com/package/auth/oauth/package-auth-oauth2-password-grant-with-scope/</guid>
      <description>OAuth2 Password Grant With Scope 延續 Password Grant 的 OAuth2 設定，我們可以在參數中加入我們要取得的 資源存取範圍（Scope），讓這個 Access Token 僅能有特定資源的存取權限
新增資源存取範圍（Scope）資料 OAuth2 定義的 Scope 皆存在 oauth_scopes 資料表中，我們在資料表中新增 user_profile 及 user_likes 這兩個 Scope
INSERT INTO &amp;#34;oauth_scopes&amp;#34; (&amp;#34;id&amp;#34;, &amp;#34;description&amp;#34;, &amp;#34;created_at&amp;#34;, &amp;#34;updated_at&amp;#34;) VALUES (&amp;#39;user_profile&amp;#39;, &amp;#39;profile&amp;#39;, now(), now()); INSERT INTO &amp;#34;oauth_scopes&amp;#34; (&amp;#34;id&amp;#34;, &amp;#34;description&amp;#34;, &amp;#34;created_at&amp;#34;, &amp;#34;updated_at&amp;#34;) VALUES (&amp;#39;user_likes&amp;#39;, &amp;#39;likes&amp;#39;, now(), now());  取得 Access token 在我們取得 Access token 的資料欄位中填入下列欄位
   欄位名稱 資料     grant_types password   username kejyun@gmail.</description>
    </item>
    
    <item>
      <title>驗證 Access Token</title>
      <link>https://laravel5-book.kejyun.com/package/auth/oauth/package-auth-oauth2-access-token-authentication/</link>
      <pubDate>Sun, 07 Mar 2021 21:24:42 +0800</pubDate>
      
      <guid>https://laravel5-book.kejyun.com/package/auth/oauth/package-auth-oauth2-access-token-authentication/</guid>
      <description>驗證 Access Token 路由設定 OAuth middleware 在我們想要保護的資源中，我們可以加入 oauth 的 middleware 中介層，這樣
// 保護的資源設定 oauth middleware Route::get(&amp;#39;/user-private-resource&amp;#39;, [&amp;#39;middleware&amp;#39;=&amp;gt;&amp;#39;oauth&amp;#39;, function() { // 取得資源擁有者編號，若經過 Password Grant 驗證的 Token 則為使用者的編號 $user_id = Authorizer::getResourceOwnerId(); $data = [ &amp;#39;user_id&amp;#39;=&amp;gt; $user_id ]; // 回傳受保護的資源 return Response::json($data); }]);  透過 Access Token 取的受保護的資源 在我們取得受保護資源的請求 Header 中填入，這樣 OAuth2 就會取得我們傳入的 Access Token，並驗證我們有沒有存取權限，若有存取權限，則會直接回傳該受保護的資源
   欄位名稱 資料     Authorization Bearer rXXoWMg5UXzQpxAynCnYYOQiZQ0xDcAjT0ywGvke    路由設定包含 Scope 的 OAuth middleware 若我們限制此路由需要有特定 Scope 的存取權限的 Access Token 才可以存取，我們可以在 middleware 後面加上允許的 Scope 名稱，若同時需要擁有多個 Scope 權限，則用 加號（+） 把 Scope 連接起來即可</description>
    </item>
    
  </channel>
</rss>