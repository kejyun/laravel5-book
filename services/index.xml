<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>服務 on Laravel 5 學習筆記</title>
    <link>https://laravel5-book.kejyun.com/services/</link>
    <description>Recent content in 服務 on Laravel 5 學習筆記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-TW</language>
    <lastBuildDate>Tue, 30 Jun 2020 21:24:42 +0800</lastBuildDate>
    
	<atom:link href="https://laravel5-book.kejyun.com/services/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>加密（encryption）</title>
      <link>https://laravel5-book.kejyun.com/services/encryption/encryption-intro/</link>
      <pubDate>Sun, 30 Aug 2020 21:24:42 +0800</pubDate>
      
      <guid>https://laravel5-book.kejyun.com/services/encryption/encryption-intro/</guid>
      <description>加密（encryption） 使用情境 我們若需要在資料庫儲存一些敏感資料（像是信用卡的資料），但我們又為了避免資料庫遭到入侵，而導致所有使用者相關的敏感資料全都被竊取，我們可以使用 Laravel 提供的「加密與解密」演算法，將我們的敏感資料加密儲存到資料庫，待我們讀取資料的時候，再將其資料解密出來處理。
設定 在 Laravel 做「加密與解密」演算法時，會使用 config/app.php 中的 key 值去當作加解密的 salt，自己的應用需要設定自己的 key 值，若沒有設定的話被加密過的值還是有可能被暴力破解出來，所以要記得去設定，而這個 key 值若變更了，雜湊的驗證也不會相同喔～
使用 // 加密 $original_data = &amp;#39;需要加密的資料&amp;#39;; $encrypt_data = Crypt::encrypt($original_data); // 解密 $decrypted = Crypt::decrypt($encrypt_data);  備註 重複加密相同的資料得到的密文不會一樣，所以不要使用像 md5 的方式去比對密文資料是否相同
使用 md5 比較密文 $original_data = &amp;#39;需要加密的資料&amp;#39;; // 第 1 次使用 md5 加密的資料 $first_md5_hash_data = md5($original_data); // 第 2 次使用 md5 加密的資料 $second_md5_hash_data = md5($original_data); // 資料相同 // true var_dump($first_md5_hash_data === $second_md5_hash_data); 使用加密演算法比較密文 $original_data = &amp;#39;需要加密的資料&amp;#39;; // 第 1 次使用加密演算法加密的資料 $first_encrypt_data = Crypt::encrypt($original_data); // 第 2 次使用加密演算法加密的資料 $second_encrypt_data = Crypt::encrypt($original_data); // 資料不相同 // false var_dump($first_encrypt_data === $second_encrypt_data); 參考資料  加密 - Laravel.</description>
    </item>
    
    <item>
      <title>雜湊（Hashing）</title>
      <link>https://laravel5-book.kejyun.com/services/hashing/hashing-intro/</link>
      <pubDate>Sun, 30 Aug 2020 21:24:42 +0800</pubDate>
      
      <guid>https://laravel5-book.kejyun.com/services/hashing/hashing-intro/</guid>
      <description>雜湊（Hashing） 使用情境 使用者輸入的密碼，通常我們將其加密再存到資料庫中，但這類的資料我們通常不需要反解回來處理，所以我們不需要使用加密的演算法去加密資料
因為加密演算法需要完整的解回原先的資料，所以若資料越長密文也會越長，但雜湊不需要解回原先的資料，只需要驗證原先的資料，經過再雜湊的檢查是相同的就好（輸入的密碼雜湊驗證與原先存在資料庫的雜湊資料相同），所以雜湊的資料可以有固定的長度，像是 md5 的雜湊資料長度固定為 32，而 Laravel 提供的 Hash 雜湊演算法，資料長度固定為 60。
設定 在 Laravel 做「雜湊」演算法時，會使用 config/app.php 中的 key 值去當作雜湊的 salt，自己的應用需要設定自己的 key 值，若沒有設定的話被加密過的值還是有可能被暴力破解出來，所以要記得去設定，而這個 key 值若變更了，雜湊的驗證也不會相同喔～
 使用 雜湊 // 雜湊 $original_password = &amp;#39;密碼明碼&amp;#39;; $hash_password = Hash::make($original_password); 驗證 // 雜湊 $original_password = &amp;#39;密碼明碼&amp;#39;; $hash_password = Hash::make($original_password); // 驗證 $check_result = Hash::check($original_password, $hash_password); // true var_dump($check_result); 備註 重複雜湊相同的資料得到的密文不會一樣，所以不要使用像 md5 的方式去比對密文資料是否相同
 使用 md5 比較密文 $original_password = &amp;#39;密碼明碼&amp;#39;; // 第 1 次使用 md5 加密的資料 $first_md5_hash_password = md5($original_password); // 第 2 次使用 md5 加密的資料 $second_md5_hash_password = md5($original_password); // 資料相同 // true var_dump($first_md5_encrypt_password === $second_md5_encrypt_password); 雖然每次雜湊的結果都不一樣，但你可以放心的將任何一次雜湊的資料存放到資料庫中，因為雖然密文不同，但 Laravel 的雜湊演算法，還是可以比對出來是不是由相同的資料去做雜湊的</description>
    </item>
    
    <item>
      <title>回應（Response）</title>
      <link>https://laravel5-book.kejyun.com/services/response/response-intro/</link>
      <pubDate>Sun, 30 Aug 2020 21:24:42 +0800</pubDate>
      
      <guid>https://laravel5-book.kejyun.com/services/response/response-intro/</guid>
      <description>回應（Response） 強制回應 JSON 建立 Middleware
namespace App\Http\Middleware; use Closure; class ForceJsonMiddleware { /** * Handle an incoming request. * * @param \Illuminate\Http\Request $request * @param \Closure $next * @return mixed */ public function handle($request, Closure $next) { $request-&amp;gt;headers-&amp;gt;set(&amp;#39;accept&amp;#39;, &amp;#39;application/json&amp;#39;); return $next($request); } } 在 Kernel.php 加入此 Middleware
&amp;#39;force-json-response&amp;#39; =&amp;gt; \App\Http\Middleware\ForceJsonMiddleware::class, 設定使用 Middleware
Route::group([&amp;#39;middleware&amp;#39; =&amp;gt; [&amp;#39;force-json-response&amp;#39;, &amp;#39;auth:api&amp;#39;]], function () { }); 參考資料  Laravel 响应：永远返回 JSON 响应 | Laravel China 社区  </description>
    </item>
    
    <item>
      <title>任務排程（Scheduling）</title>
      <link>https://laravel5-book.kejyun.com/services/scheduling/scheduling-intro/</link>
      <pubDate>Sun, 30 Aug 2020 21:24:42 +0800</pubDate>
      
      <guid>https://laravel5-book.kejyun.com/services/scheduling/scheduling-intro/</guid>
      <description>任務排程（Scheduling） 我們通常會把一些每小時、每 6 小時、每日、每週、每月等等之類固定時間要做的工作丟到 Linux 系統的 crontab 中去執行，通常像是每日要統計昨天網站的活動資訊做數據分析之類的工作，這類的工作通常會花費比較久的時間
在 Linux 設定排程工作 我們通常會在命令列用 $ crontab -e 的方式去編輯排程工作
$ crontab -e 在用到 crontab 的時候，我們需要瞭解怎麼設定排程工作的執行時間，整個的 crontab 的設定可能會像這樣：
# 每天凌晨 3 點統計昨天的 Pageview 0 3 * * * /usr/bin/php /home/kejyun/laravel4/artisan cronjob:statisticYesterdayPageview 在前方可以看到有 5 個數字可以做設定，依序分別代表的意思為：
 分鐘 (0-59) 小時 (0-23) 每個月第幾天 (1-31) 月份 (1-12) 每週的第幾天 (0-6) 0：星期日 1：星期一 2：星期二 3：星期三 4：星期四 5：星期五 6：星期六  這 5 個參數之間用空白隔開，每個參數除了設定單一個數字，也可以用逗號(,)去隔開設定相同單位的時間設定，像是：
# 每天凌晨 4 點及 16 點寄送廣告信 0 4,16 * * * /usr/bin/php /home/kejyun/laravel4/artisan cronjob:sendCommercialMail  這裏有一些相關的設定範例可以當作參考：</description>
    </item>
    
    <item>
      <title>Compass</title>
      <link>https://laravel5-book.kejyun.com/services/compass/compass-intro/</link>
      <pubDate>Sun, 30 Aug 2020 21:24:42 +0800</pubDate>
      
      <guid>https://laravel5-book.kejyun.com/services/compass/compass-intro/</guid>
      <description>Compass 安裝 RVM 1. 安裝 GPG keys
$ gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB 2. 安裝 RVM
\curl -sSL https://get.rvm.io | bash 使用 RVM 安裝 Ruby 列出所有可以安裝的版本
rvm list known 安裝指定版本
rvm install 2.3.1  必須使用管理者權限安裝過以下套件：
  autoconf, automake, bison, libffi-dev, libgdbm-dev, libncurses5-dev, libsqlite3-dev, libtool, libyaml-dev, pkg-config, sqlite3, zlib1g-dev, libgmp-dev, libreadline6-dev
  安裝 Compass gem update --system gem install compass 監控 Compass gulp watch 參考資料  RVM: Ruby Version Manager - Installing RVM Install the Compass Stylesheet Authoring Framework | Compass Documentation creationix/nvm: Node Version Manager - Simple bash script to manage multiple active node.</description>
    </item>
    
  </channel>
</rss>